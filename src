import sys
import math
import random
from itertools import permutations
import numpy as np
import gurobipy as grb
import itertools
from collections import defaultdict


import matplotlib.pyplot as plt
# from matplotlib import style
import matplotlib
from fontTools.misc.py23 import xrange

if __name__ == "__main__":
    # Create a new model

    # Create a new model
    Rebalancing = grb.Model(name="MIP Model")

    # ensure that I keep the same random numbers
    rnd = np.random
    rnd.seed(0)

    nodes = []
    vehicles = []
    distanceMatrix = {}
    status_node = {}
    P = {}
    cost = {}
    actual_demand = {}
    forecast_node = {}

    path = 'Coordinates_20_Random_Ber.txt'
    name = '20_Random_Ber.txt'
    data_header = np.loadtxt('Instances/ZeroDemand/' + path, max_rows=1, dtype=int)
    print(data_header)
    numberOfNodes = data_header[0]
    numberOfVehicles = data_header[1]
    vehicleCapacity = data_header[2]
    data_main_body = np.loadtxt('Instances/ZeroDemand/' + path, skiprows=1, dtype=int)
    for i in range(0, numberOfNodes + 1):
        actual_demand[i] = int(data_main_body[i, numberOfNodes + 2])
        P[i] = int(data_main_body[i, numberOfNodes + 3])
        status_node[i] = int(data_main_body[i, numberOfNodes + 4])
        forecast_node[i] = status_node[i] - actual_demand[i]
        for j in range(0, numberOfNodes + 1):
            distanceMatrix[(i, j)] = data_main_body[i, j + 1]
            cost[(i, j)] = distanceMatrix[(i, j)]

    vehicles = (k for k in range(1, numberOfVehicles + 1))
    vehicles = tuple(vehicles)
    # print("Vehicles:", vehicles)

    nodes = (i for i in range(0, numberOfNodes + 1))
    nodes = tuple(nodes)
    # print("Nodes:", nodes)

    locations = (i for i in range(1, numberOfNodes + 1))
    locations = tuple(locations)

    # initial load of vehicle k
    initial_load = {(i, k): 0 for k in vehicles for i in nodes}
    print("The initial load of vehicle (k) is:", initial_load)


    # penalty
    p = 1500

    # big M
    M = 100000

    validCut1_subset = {(i, j): [] for i in locations for j in locations}
    for i in locations:
        for j in locations:
            if j <= i:
                continue
            for h in locations:
                if h != i and h != j and i != j:
                    if abs(actual_demand[i] + actual_demand[j] + actual_demand[h]) > vehicleCapacity:
                        subset = h
                        validCut1_subset[i, j].append(subset)

    for i in locations:
        for j in locations:
            if len(validCut1_subset[i, j]) == 0:
                del validCut1_subset[i, j]

    #### decision variables ####

    # if vehicle k traverses arc i,j
    x = {(i, j, k): Rebalancing.addVar(vtype=grb.GRB.BINARY,
                                       name=f"x_{i}_{j}_{k}".format(i, j, k))
         for i in nodes for j in nodes for k in vehicles}

    # if station i is a load station
    g = {(i, k): Rebalancing.addVar(vtype=grb.GRB.BINARY,
                                    name=f"g_{i}_{k}".format(i, k))
         for i in nodes for k in vehicles}

    # if station i is an unload station
    d = {(i, k): Rebalancing.addVar(vtype=grb.GRB.BINARY,
                                    name=f"d_{i}_{k}".format(i, k))
         for i in nodes for k in vehicles}

    # load of vehicle k after serving node i
    l = {(i, k): Rebalancing.addVar(vtype=grb.GRB.INTEGER, lb=0,
                                    name=f"l_{i}_{k}".format(i, k))
         for i in nodes for k in vehicles}

    # status of station i ∈ N after being served
    st = {(i): Rebalancing.addVar(vtype=grb.GRB.INTEGER, lb=0,
                                  name=f"st_{i}".format(i))
          for i in nodes}

    # Number of bikes loaded on vehicle k in station i
    y_l = {(i, k): Rebalancing.addVar(vtype=grb.GRB.INTEGER, lb=0,
                                      name=f"y_l_{i}_{k}".format(i, k))
           for i in nodes for k in vehicles}

    # Number of bikes unloaded on vehicle k in station i
    y_u = {(i, k): Rebalancing.addVar(vtype=grb.GRB.INTEGER, lb=0,
                                      name=f"y_u_{i}_{k}".format(i, k))
           for i in nodes for k in vehicles}

    # supporting integer variable to incorporate penalty of unmet demand, calculates excess or shortage
    b = {(i): Rebalancing.addVar(vtype=grb.GRB.INTEGER, lb=0,
                                 name=f"b_{i}".format(i))
         for i in nodes}

    # integer auxiliary variable used to bound bi
    r = {(i): Rebalancing.addVar(vtype=grb.GRB.INTEGER, lb=0,
                                 name=f"r_{i}".format(i))
         for i in nodes}

    # binary auxiliary variable used to bound bi, where θi = 1 if there is a shortage of bicycles
    theta = {(i): Rebalancing.addVar(vtype=grb.GRB.BINARY,
                                     name=f"theta_{i}".format(i))
             for i in nodes}

    #### Objective function (minimize total cost & penalty of unmet demand) #### (1)
    Rebalancing.setObjective(
        grb.quicksum(cost[i, j] * x[i, j, k] for i in nodes for j in nodes if i != j for k in vehicles)
        + p * grb.quicksum(r[i] for i in nodes), grb.GRB.MINIMIZE)

    #### Constraints ####

    # Everything leaves from the depot (2)
    for k in vehicles:
        Rebalancing.addConstr((grb.quicksum(x[0, j, k] for j in nodes if j != 0)) == 1)

    # Everything returns at the depot (3)
    for k in vehicles:
        Rebalancing.addConstr((grb.quicksum(x[j, 0, k] for j in nodes if j != 0)) == 1)

    # Every node is served by 1 vehicle and visited at most once (4)
    for i in nodes:
        if i != 0:
            if actual_demand[i] < 0:
                Rebalancing.addConstr(grb.quicksum((x[i, j, k] for j in nodes if j != i for k in vehicles)) == 1)
            else:
                Rebalancing.addConstr(grb.quicksum((x[i, j, k] for j in nodes if j != i for k in vehicles)) <= 1)

    # Flow conservation excluding 0 (5)
    for j in nodes:
        for k in vehicles:
            if j != 0:
                Rebalancing.addConstr((grb.quicksum(x[i, j, k] for i in nodes if j != i) -
                                       grb.quicksum(x[j, i, k] for i in nodes if j != i) == 0))

    ## # # # # # # # # # # # # #  Subtour elimination constraint (6)
    ## Excluded 0, Dantzig constraint
    # for s in subset:
    #    Rebalancing.addConstr(grb.quicksum(x[i, j, k] for i in s for j in s if i != j if i!=0 if j!=0 for k in vehicles) <= len(s) - 1)

    # calculate the number of bikes loaded in vehicle after serving node i (7), (8), (9)
    for k in vehicles:
        for i in nodes:
            if i != 0:
                Rebalancing.addConstr(l[i, k] >= - M * grb.quicksum(x[i, j, k] for j in nodes if j != i))

    for k in vehicles:
        for i in nodes:
            if i != 0:
                Rebalancing.addConstr(l[i, k] <= M * grb.quicksum(x[i, j, k] for j in nodes if j != i))

    for k in vehicles:
        for i in nodes:
            for j in nodes:
                if i != j and j != 0:
                    Rebalancing.addConstr(l[j, k] <= l[i, k] + y_l[j, k] - y_u[j, k] + M * (1 - x[i, j, k]))

    for k in vehicles:
        for i in nodes:
            for j in nodes:
                if i != j and j != 0:
                    Rebalancing.addConstr(l[j, k] >= l[i, k] + y_l[j, k] - y_u[j, k] - M * (1 - x[i, j, k]))

    # number of bikes available to load (10), (11)
    for k in vehicles:
        for i in nodes:
            for j in nodes:
                if i != j:
                    Rebalancing.addConstr(y_l[j, k] <= vehicleCapacity - l[i, k] + M * (1 - x[i, j, k]))

    for k in vehicles:
        for j in nodes:
            Rebalancing.addConstr(y_l[j, k] >= 0)

    for k in vehicles:
        for j in nodes:
            Rebalancing.addConstr(y_l[j, k] <= M * grb.quicksum(x[i, j, k] for i in nodes if i != j))

    # number of bikes available to unload (12), (13)
    for k in vehicles:
        for i in nodes:
            for j in nodes:
                if i != j:
                    Rebalancing.addConstr(y_u[j, k] <= l[i, k] + M * (1 - x[i, j, k]))

    for k in vehicles:
        for j in nodes:
            Rebalancing.addConstr(y_u[j, k] >= 0)

    for k in vehicles:
        for j in nodes:
            Rebalancing.addConstr(y_u[j, k] <= M * grb.quicksum(x[i, j, k] for i in nodes if i != j))

    # A station can be either a load or unload station (14)
    for i in nodes:
        if i != 0:
            Rebalancing.addConstr(
                (grb.quicksum(g[i, k] for k in vehicles) + grb.quicksum(d[i, k] for k in vehicles)) <= 1)

    # Connect load or unload with bike availability (15), (16)
    for k in vehicles:
        for i in nodes:
            Rebalancing.addConstr(y_l[i, k] <= M * g[i, k])

    for k in vehicles:
        for i in nodes:
            Rebalancing.addConstr(y_u[i, k] <= M * d[i, k])

    # if y=0, g/d=0

    for k in vehicles:
        for i in nodes:
            Rebalancing.addConstr(y_l[i, k] >= g[i, k])

    for k in vehicles:
        for i in nodes:
            Rebalancing.addConstr(y_u[i, k] >= d[i, k])

    # number of bikes does not exceed vehicle capacity (17)
    #  number of vehicles
    for k in vehicles:
        for i in nodes:
            Rebalancing.addConstr(l[i, k] >= 0)

    for k in vehicles:
        for i in nodes:
            Rebalancing.addConstr(l[i, k] <= vehicleCapacity)

    # Ensures that parking station capacity is not violated (18)
    for i in nodes:
        if i != 0:
            Rebalancing.addConstr(P[i] >= status_node[i] - grb.quicksum(y_l[i, k] for k in vehicles) + grb.quicksum(
                y_u[i, k] for k in vehicles))

    # When a location needs unloading or loading force the vehicle to pass from this spot
    Rebalancing.addConstrs(sum(sum(x[i, j, k] for i in nodes) for k in vehicles) >= d[j, k] for j in nodes if i != j)
    Rebalancing.addConstrs(sum(sum(x[i, j, k] for i in nodes) for k in vehicles) >= g[j, k] for j in nodes if j != i)

    # When a location needs unloading force theta of i to be 1
    Rebalancing.addConstrs(sum(d[i, k] for k in vehicles) <= theta[i] for i in nodes)

    for k in vehicles:
        Rebalancing.addConstr(y_l[0, k] == 0)
        Rebalancing.addConstr(y_u[0, k] == 0)
        Rebalancing.addConstr(theta[0] == 0)
        Rebalancing.addConstr(r[0] == 0)
        Rebalancing.addConstr(b[0] == 0)
        for i in nodes:
            for j in nodes:
                if i == j:
                    Rebalancing.addConstr(x[i, j, k] == 0)

    # initialize status
    Rebalancing.addConstr(st[0] == 0)
    Rebalancing.addConstr(P[0] == 0)

    # st_i is the status of node after being served by vehicle k (19)
    for i in nodes:
        if i != 0:
            Rebalancing.addConstr(st[i] == status_node[i] - grb.quicksum(y_l[i, k] for k in vehicles) + grb.quicksum(
                y_u[i, k] for k in vehicles))

    # the penalty is charged if only there is a shortage of bikes in node i (20), (21), (22), (23)
    for i in nodes:
        if i != 0:
            Rebalancing.addConstr(b[i] == forecast_node[i] - st[i])

    for i in nodes:
        if i != 0:
            Rebalancing.addConstr(r[i] >= b[i])

    for i in nodes:
        if i != 0:
            Rebalancing.addConstr(r[i] <= M * theta[i])

    for i in nodes:
        if i != 0:
            Rebalancing.addConstr(r[i] <= b[i] + M * (1 - theta[i]))

    for i in nodes:
        if i != 0:
            Rebalancing.addConstr(r[i] >= 0)

    # Set the load of vehicle k when leaving the depot equal to the initial vehicle load
    for k in vehicles:
        Rebalancing.addConstr(l[0, k] == initial_load[0, k])


    ######## VALID INEQUALITIES ########
    for k in vehicles:
        for h in validCut1_subset:
            for i in locations:
                for j in locations:
                    if (i,j) == h:
                        Rebalancing.addConstr(x[i, j, k] + grb.quicksum(x[j, h, k] for h in validCut1_subset[i,j]) <= 1)

    for k in vehicles:
        for h in validCut1_subset:
            for i in locations:
                for j in locations:
                    if (i,j) == h:
                        Rebalancing.addConstr(grb.quicksum(x[h, i, k] for h in validCut1_subset[i,j]) + x[i, j, k] <= 1)

    ###CALLBACK METHOD- LAZY CONSTRAINTS - SUBTOUR ELIMINATION

    # Callback - use lazy constraints to eliminate sub-tours
    def subtourelim(Rebalancing, where):
        if where == grb.GRB.Callback.MIPSOL:
            # make a list of edges selected in the solution
            vals = Rebalancing.cbGetSolution(Rebalancing._x)
            for f in range(1, numberOfVehicles + 1):  # subtouring for each vehicle
                selected = grb.tuplelist(
                    (i, j, k) for i, j, k in Rebalancing._x.keys() if vals[i, j, k] > 0.5 if f == k)
                tour = shortest_subtour(selected, f)
                if tour == None:
                    continue
                else:
                    Rebalancing.cbLazy(grb.quicksum(
                        Rebalancing._x[i, j, k] for i in tour for j in tour if i != j if i != 0 if j != 0 for k in
                        vehicles) <= len(tour) - 1)
                    break


    # Given a tuplelist of edges, find the shortest subtour not containing depot
    def shortest_subtour(selected, k):
        # Create a mapping from each node to its neighbours
        node_neighbors = defaultdict(list)

        for i, j, k in selected:
            node_neighbors[i].append(i)
            node_neighbors[i].append(j)

        # assert all(len(neighbors) == 2 for neighbors in node_neighbors.values())
        keys = list(node_neighbors.keys())
        node_neighbors_arr = []
        rows, cols = len(selected), 2
        for i in keys:
            col = []
            for j in range(cols):
                col.append(node_neighbors[i][j])
            node_neighbors_arr.append(col)

        unvisited = set(node_neighbors)
        subtour = None
        subtourExists = False
        cycle = []
        firstNode = -1
        lastNode = -1
        neighbors = list(unvisited)
        next = 0
        counter = 0
        count = False
        while node_neighbors:
            for i in range(0, len(node_neighbors_arr)):
                if i >= len(node_neighbors_arr):
                    count == False
                    break

                if count == True:
                    i = i - 1
                if next != node_neighbors_arr[i][0] and subtourExists == False:
                    counter = counter + 1
                    continue
                prev = node_neighbors_arr[i][0]
                if i == 0 or subtourExists == True:
                    if count == False:
                        firstNode = prev
                        cycle.append(prev)
                        subtourExists = False
                next = node_neighbors_arr[i][1]
                cycle.append(next)
                del node_neighbors_arr[i]
                del node_neighbors[prev]
                count = True
                counter = counter + 1
                if next == 0:
                    if firstNode == 0:
                        if len(node_neighbors) == 0:
                            return subtour  # No subtour
                        else:
                            cycle.clear()
                            subtourExists = True
                            count = False
                            break
                elif firstNode == next:  # and len(node_neighbors) == 0:
                    subtour = cycle
                    return subtour

        assert subtour is not None
        return subtour
    '''
    ############################
    # MIP START####
    initial_values = {}
    solFile = 'HeuristicSolutions/HeuristicSol_' + name
    with open(solFile, 'r') as file:
        for line in file:
            values = line.split()
            initial_values[int(values[0]), int(values[1]), int(values[2])] = int(values[3])
    
    for k in range (1, numberOfVehicles + 1):
        for i in range(0, numberOfNodes + 1):
            for j in range(0, numberOfNodes + 1):
                if (i,j,k) in initial_values :
                    x[i, j, k].Start = initial_values.get((i, j, k), 0)
                else:
                    x[i, j, k].Start = 0
   
    initial_values = {}
    solFile = 'HeuristicSolutions/HeuristicLoadvalues_' + name
    with open(solFile, 'r') as file:
        for line in file:
            values = line.split()
            initial_values[int(values[0]), int(values[1])] = int(values[2])
    
    for k in range (1, numberOfVehicles + 1):
        for i in range(0, numberOfNodes + 1):
            if (i, k) in initial_values:
                y_l[i,k].Start = initial_values.get((i, k), 0)
            else:
                y_l[i,k].Start = 0
    
    initial_values = {}
    solFile = 'HeuristicSolutions/HeuristicUnloadvalues_' + name
    with open(solFile, 'r') as file:
        for line in file:
            values = line.split()
            initial_values[int(values[0]), int(values[1])] = int(values[2])
    
    
    for k in range (1, numberOfVehicles + 1):
        for i in range(0, numberOfNodes + 1):
            if (i, k) in initial_values:
                y_u[i,k].Start = initial_values.get((i, k), 0)
            else:
                y_u[i,k].Start = 0
    
    initial_values = {}
    solFile = 'HeuristicSolutions/HeuristicRvalues_' + name
    with open(solFile, 'r') as file:
        for line in file:
            values = line.split()
            initial_values[int(values[0])] = int(values[1])
    
    # Set initial values
    
    for i in range(1, numberOfNodes + 1):
        r[i].Start = initial_values.get((i), 0)
        print(initial_values.get((i), 0), initial_values.get((i), 1))
    
    initial_values = {}
    solFile = 'HeuristicSolutions/HeuristicFinalStatusvalues_' + name
    with open(solFile, 'r') as file:
        for line in file:
            values = line.split()
            initial_values[int(values[0])] = int(values[1])
    
        for i in range(0, numberOfNodes + 1):
            if (i) in initial_values:
                st[i].Start = initial_values.get((i), 0)
            else:
                st[i].Start = 0
    
    initial_values = {}
    solFile = 'HeuristicSolutions/HeuristicVehicleLoadvalues_' + name
    with open(solFile, 'r') as file:
        for line in file:
            values = line.split()
            initial_values[int(values[0]), int(values[1])] = int(values[2])
    
    
    for k in range (1, numberOfVehicles + 1):
        for i in range(0, numberOfNodes + 1):#
            if (i, k) in initial_values:
                l[i,k].Start = initial_values.get((i, k), 0)
            else:
                l[i, k].Start = 0
    
    Rebalancing.update()
    '''
    ################################################################
    # Optimize the model
    Rebalancing._x = x
    Rebalancing.Params.LazyConstraints = 1
    ##Rebalancing.Params.MIPFocus = 2
    ##Rebalancing.Params.Heuristics = 0.0
    ## Rebalancing.setParam('MIPGap', 0.000000) # finish running once 5% gap is reached
    ## Rebalancing.setParam('Timelimit', 60) # finish running once 1 minute has passed
    Rebalancing.optimize(subtourelim)

    runtime = Rebalancing.Runtime
    runtime = "%.2f" % runtime

    ##Rebalancing.optimize()
    Rebalancing.display()
    RoutingCosts = 0

    print("Start from here")

    for v in Rebalancing.getVars():
        print('%s %g' % (v.varName, v.x))
    Rebalancing.printAttr('x')
    print("Values of x:")


    for i, j, k in x:
        if x[i, j, k].x > 0.1:
            print("RoutingCosts", i, j, cost[i,j])
            RoutingCosts = RoutingCosts + cost[i,j]
            #print(f"x_{i}_{j}_{k}:", x[i, j, k])
    print("RoutingCosts", RoutingCosts)

    folderPath = 'Solutions/' + path
    f = open(folderPath, 'w')
    counter = 0
    f.write(f"{RoutingCosts} {runtime}\n")
    for i, j, k in x:
        if x[i, j, k].x > 0.0:
            f.write(f"{i}_{j}_{k}\n")
    f.write(f"Loading/Unloading quantities\n")
    for i, k in y_l:
        if y_l[i, k].x > 0.0:
            f.write(f"load_{i}_{k}: {y_l[i, k].x}\n")
    for i, k in y_u:
        if y_u[i, k].x > 0.0:
            f.write(f"unload_{i}_{k}: {y_u[i, k].x}\n")

    print('end')




